dropTableDeckSettingsState:
DROP TABLE IF EXISTS DeckSettingsState;

createTableDeckSettingsState:
CREATE TEMPORARY TABLE DeckSettingsState (
    deckId INTEGER NOT NULL,
    presetNameInputDialogStatus TEXT NOT NULL DEFAULT 'Invisible', -- AS PresetNameInputDialogStatus
    typedPresetName TEXT NOT NULL DEFAULT '',
    nameCheckResult TEXT, -- AS NameCheckStatus
    renamePresetId INTEGER
);

initDeckSettingsState:
INSERT INTO DeckSettingsState(deckId) VALUES (?);

createViewCurrentExercisePreference:
CREATE TEMPORARY VIEW IF NOT EXISTS CurrentExercisePreference
AS SELECT * FROM ExercisePreference WHERE ExercisePreference.id == (
    SELECT exercisePreferenceId FROM Deck WHERE Deck.id == (
        SELECT deckId FROM DeckSettingsState
    )
);

createViewCurrentPronunciation:
CREATE TEMPORARY VIEW IF NOT EXISTS CurrentPronunciation
AS SELECT * FROM Pronunciation WHERE Pronunciation.id == (
    SELECT pronunciationId FROM CurrentExercisePreference
);

createTriggerPreventRemovalOfDefaultExercisePreference:
CREATE TEMPORARY TRIGGER IF NOT EXISTS preventRemovalOfDefaultExercisePreference
BEFORE DELETE ON ExercisePreference WHEN old.id == 0
BEGIN
    SELECT RAISE(ROLLBACK, 'cannot delete default ExercisePreference');
END;

createTriggerOnTryToModifyDefaultExercisePreference:
CREATE TEMPORARY TRIGGER IF NOT EXISTS OnTryToModifyDefaultExercisePreference
BEFORE UPDATE ON ExercisePreference
WHEN old.id == 0 AND (new.id != 0
                     OR new.name != ''
                     OR new.randomOrder != 1
                     OR new.testMethod != 1
                     OR new.pronunciationId != 0)
BEGIN
    INSERT INTO ExercisePreference(
        name,
        randomOrder,
        testMethod,
        pronunciationId
    ) VALUES (
        new.name,
        new.randomOrder,
        new.testMethod,
        new.pronunciationId
    );

    UPDATE Deck
    SET exercisePreferenceId = (SELECT last_insert_rowid())
    WHERE id == (SELECT deckId FROM DeckSettingsState);

    SELECT RAISE(IGNORE);
END;

createTriggerSetDefaultExercisePreferenceIfNeed:
CREATE TEMPORARY TRIGGER IF NOT EXISTS setDefaultExercisePreferenceIfNeed
BEFORE UPDATE ON ExercisePreference
WHEN new.name == ''
 AND new.randomOrder == 1
 AND new.testMethod == 1
 AND new.pronunciationId == 0
BEGIN
    UPDATE Deck
    SET exercisePreferenceId = 0
    WHERE id == (SELECT deckId FROM DeckSettingsState);

    SELECT RAISE(IGNORE);
END;

createTriggerOnDeleteExercisePreference:
CREATE TEMPORARY TRIGGER IF NOT EXISTS onDeleteExercisePreference
AFTER DELETE ON ExercisePreference
BEGIN
    UPDATE Deck
    SET exercisePreferenceId = 0
    WHERE exercisePreferenceId == old.id;
END;

createTriggerDeleteUnusedIndividualExercisePreference:
CREATE TEMPORARY TRIGGER IF NOT EXISTS deleteUnusedIndividualExercisePreference
AFTER UPDATE OF exercisePreferenceId ON Deck
WHEN old.exercisePreferenceId NOT IN (0, new.exercisePreferenceId)
BEGIN
    DELETE FROM ExercisePreference
    WHERE id != 0
      AND name == ''
      AND id NOT IN (SELECT exercisePreferenceId FROM Deck);
END;

createTriggerClenupAfterDeleteOfExercisePreference:
CREATE TEMPORARY TRIGGER IF NOT EXISTS clenupAfterDeleteOfExercisePreference
AFTER DELETE ON ExercisePreference
BEGIN
    DELETE FROM Pronunciation
    WHERE id != 0
      AND name == ''
      AND id NOT IN (SELECT pronunciationId FROM ExercisePreference);
END;