createStateIfNotExists:
CREATE TABLE IF NOT EXISTS TempDeckSettingsState (
    deckId INTEGER NOT NULL,
    presetNameInputDialogStatus TEXT NOT NULL DEFAULT 'Invisible', -- AS PresetNameInputDialogStatus
    typedPresetName TEXT NOT NULL DEFAULT '',
    nameCheckResult TEXT NOT NULL DEFAULT 'OK', -- AS NameCheckStatus
    renamePresetId INTEGER
);

cleanState:
DELETE FROM TempDeckSettingsState;

initState:
INSERT INTO TempDeckSettingsState(deckId) VALUES (?);

createViewCurrentExercisePreference:
CREATE VIEW IF NOT EXISTS TempCurrentExercisePreference
AS SELECT * FROM ExercisePreference WHERE ExercisePreference.id == (
    SELECT exercisePreferenceId FROM Deck WHERE Deck.id == (
        SELECT deckId FROM TempDeckSettingsState
    )
);

createViewCurrentPronunciation:
CREATE VIEW IF NOT EXISTS TempCurrentPronunciation
AS SELECT * FROM Pronunciation WHERE Pronunciation.id == (
    SELECT pronunciationId FROM TempCurrentExercisePreference
);

createTriggerPreventRemovalOfDefaultExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempPreventRemovalOfDefaultExercisePreference
BEFORE DELETE ON ExercisePreference WHEN old.id == 0
BEGIN
    SELECT RAISE(ROLLBACK, 'cannot delete default ExercisePreference');
END;

createTriggerTransitionFromDefaultToIndividualBeforeUpdateOnExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromDefaultToIndividualBeforeUpdateOnExercisePreference
BEFORE UPDATE ON ExercisePreference
WHEN old.id == 0 AND (new.id != 0
                      OR new.name != ''
                      OR new.randomOrder != 1
                      OR new.testMethod != 1
                      OR new.intervalSchemeId != 0
                      OR new.pronunciationId != 0
                      OR new.isQuestionDisplayed != 1
                     )
BEGIN
    INSERT INTO ExercisePreference(
        name,
        randomOrder,
        testMethod,
        intervalSchemeId,
        pronunciationId,
        isQuestionDisplayed
    ) VALUES (
        new.name,
        new.randomOrder,
        new.testMethod,
        new.intervalSchemeId,
        new.pronunciationId,
        new.isQuestionDisplayed
    );

    UPDATE Deck
    SET exercisePreferenceId = (SELECT last_insert_rowid())
    WHERE id == (SELECT deckId FROM TempDeckSettingsState);

    SELECT RAISE(IGNORE);
END;

createTriggerTranstionFromIndividualToDefaultBeforeUpdateOnExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempTranstionFromIndividualToDefaultBeforeUpdateOnExercisePreference
BEFORE UPDATE ON ExercisePreference
WHEN new.name == ''
     AND new.randomOrder == 1
     AND new.testMethod == 1
     AND new.intervalSchemeId == 0
     AND new.pronunciationId == 0
     AND new.isQuestionDisplayed == 1
BEGIN
    UPDATE Deck
    SET exercisePreferenceId = 0
    WHERE id == (SELECT deckId FROM TempDeckSettingsState);

    SELECT RAISE(IGNORE);
END;

createTriggerTransitionToDefaultAfterDeleteOnExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempTransitionToDefaultAfterDeleteOnExercisePreference
AFTER DELETE ON ExercisePreference
BEGIN
    UPDATE Deck
    SET exercisePreferenceId = 0
    WHERE exercisePreferenceId == old.id;
END;

createTriggerDeleteUnusedIndividualExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempDeleteUnusedIndividualExercisePreference
AFTER UPDATE OF exercisePreferenceId ON Deck
WHEN old.exercisePreferenceId NOT IN (0, new.exercisePreferenceId)
BEGIN
    DELETE FROM ExercisePreference
    WHERE id != 0
          AND name == ''
          AND id NOT IN (SELECT exercisePreferenceId FROM Deck);
END;

createTriggerClenupAfterDeleteOfExercisePreference:
CREATE TRIGGER IF NOT EXISTS TempClenupAfterDeleteOfExercisePreference
AFTER DELETE ON ExercisePreference
BEGIN
    DELETE FROM Pronunciation
    WHERE id != 0
          AND name == ''
          AND id NOT IN (SELECT pronunciationId FROM ExercisePreference);

    DELETE FROM IntervalScheme
    WHERE id != 0
          AND name == ''
          AND id NOT IN (SELECT intervalSchemeId FROM ExercisePreference);
END;