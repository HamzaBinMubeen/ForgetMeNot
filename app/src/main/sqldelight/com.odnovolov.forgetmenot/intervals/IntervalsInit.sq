createStateIfNotExists:
CREATE TABLE IF NOT EXISTS TempIntervalsState (
    presetNameInputDialogStatus TEXT NOT NULL DEFAULT 'Invisible', -- AS PresetNameInputDialogStatus
    typedIntervalSchemeName TEXT NOT NULL DEFAULT '',
    nameCheckResult TEXT NOT NULL DEFAULT 'OK', -- AS NameCheckStatus
    renameIntervalSchemeId INTEGER
);

cleanState:
DELETE FROM TempIntervalsState;

initState:
INSERT INTO TempIntervalsState DEFAULT VALUES;

createTriggerPreventRemovalOfDefaultIntervalScheme:
CREATE TRIGGER IF NOT EXISTS TempPreventRemovalOfDefaultIntervalScheme
BEFORE DELETE ON IntervalScheme WHEN old.id == 0
BEGIN
    SELECT RAISE(ROLLBACK, 'cannot delete default IntervalScheme');
END;

createTriggerTransitionToDefaultAfterDeleteOnIntervalScheme:
CREATE TRIGGER IF NOT EXISTS TempTransitionToDefaultAfterDeleteOnIntervalScheme
AFTER DELETE ON IntervalScheme
BEGIN
    UPDATE ExercisePreference
    SET intervalSchemeId = 0
    WHERE intervalSchemeId == old.id;
END;

createTriggerTransitionFromDefaultToIndividualBeforeDeleteOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromDefaultToIndividualBeforeDeleteOnInterval
BEFORE DELETE ON Interval WHEN old.intervalSchemeId == 0
BEGIN
    INSERT INTO IntervalScheme(name) VALUES ('');

    UPDATE ExercisePreference
    SET intervalSchemeId = (SELECT last_insert_rowid())
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    INSERT INTO Interval(
        intervalSchemeId,
        targetLevelOfKnowledge,
        value
    ) SELECT
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        targetLevelOfKnowledge,
        value
    FROM Interval WHERE intervalSchemeId == 0 AND id != old.id;

    SELECT RAISE(IGNORE);
END;

createTriggerTransitionFromIndividualToDefaultAfterDeleteOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromIndividualToDefaultAfterDeleteOnInterval
AFTER DELETE ON Interval
WHEN (SELECT count(*) FROM IntervalScheme WHERE id == old.intervalSchemeId AND id != 0 AND name == '') == 1
      AND (SELECT count(*)
           FROM (SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == old.intervalSchemeId
                 UNION SELECT * FROM (
                     SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == old.intervalSchemeId
                     EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 )
                )
          ) == 0
BEGIN
    UPDATE ExercisePreference
    SET intervalSchemeId = 0
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);
END;

createTriggerTransitionFromDefaultToSharedBeforeUpdateOnIntervalScheme:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromDefaultToSharedBeforeUpdateOnIntervalScheme
BEFORE UPDATE ON IntervalScheme
WHEN old.id == 0 AND new.name != ''
BEGIN
    INSERT INTO IntervalScheme(name) VALUES (new.name);

    UPDATE ExercisePreference
    SET intervalSchemeId = (SELECT last_insert_rowid())
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    INSERT INTO Interval(
        intervalSchemeId,
        targetLevelOfKnowledge,
        value
    ) SELECT
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        targetLevelOfKnowledge,
        value
    FROM Interval WHERE intervalSchemeId == 0;

    SELECT RAISE(IGNORE);
END;

createTriggerTransitionFromDefaultToIndividualBeforeUpdateOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromDefaultToIndividualBeforeUpdateOnInterval
BEFORE UPDATE ON Interval
WHEN old.intervalSchemeId == 0 AND old.value != new.value
BEGIN
    INSERT INTO IntervalScheme(name) VALUES ('');

    UPDATE ExercisePreference
    SET intervalSchemeId = (SELECT last_insert_rowid())
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    INSERT INTO Interval(
        intervalSchemeId,
        targetLevelOfKnowledge,
        value
    ) SELECT
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        targetLevelOfKnowledge,
        value
    FROM Interval WHERE intervalSchemeId == 0 AND targetLevelOfKnowledge != new.targetLevelOfKnowledge
    UNION VALUES (
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        new.targetLevelOfKnowledge,
        new.value
    );

    SELECT RAISE(IGNORE);
END;

createTriggerTransitionFromIndividualToDefaultAfterUpdateOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromIndividualToDefaultAfterUpdateOnInterval
AFTER UPDATE ON Interval
WHEN (SELECT count(*) FROM IntervalScheme WHERE id == new.intervalSchemeId AND id != 0 AND name == '') == 1
      AND (SELECT count(*)
           FROM (SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == new.intervalSchemeId
                 UNION SELECT * FROM (
                     SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == new.intervalSchemeId
                     EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 )
                )
          ) == 0
BEGIN
    UPDATE ExercisePreference
    SET intervalSchemeId = 0
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);
END;

createTriggerTransitionFromDefaultToIndividualBeforeInsertOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromDefaultToIndividualBeforeInsertOnInterval
BEFORE INSERT ON Interval
WHEN new.intervalSchemeId == 0
BEGIN
    INSERT INTO IntervalScheme(name) VALUES ('');

    UPDATE ExercisePreference
    SET intervalSchemeId = (SELECT last_insert_rowid())
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    INSERT INTO Interval(
        intervalSchemeId,
        targetLevelOfKnowledge,
        value
    ) VALUES (
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        new.targetLevelOfKnowledge,
        new.value
    );

    INSERT INTO Interval(
        intervalSchemeId,
        targetLevelOfKnowledge,
        value
    ) SELECT
        (SELECT intervalSchemeId FROM TempCurrentExercisePreference),
        targetLevelOfKnowledge,
        value
    FROM Interval WHERE intervalSchemeId == 0;

    SELECT RAISE(IGNORE);
END;

createTriggerTransitionFromIndividualToDefaultWhenInsertOnInterval:
CREATE TRIGGER IF NOT EXISTS TempTransitionFromIndividualToDefaultWhenInsertOnInterval
AFTER INSERT ON Interval
WHEN (SELECT count(*) FROM IntervalScheme WHERE id == new.intervalSchemeId AND id != 0 AND name == '') == 1
      AND (SELECT count(*)
           FROM (SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == new.intervalSchemeId
                 UNION SELECT * FROM (
                     SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == new.intervalSchemeId
                     EXCEPT SELECT targetLevelOfKnowledge, value FROM Interval WHERE intervalSchemeId == 0
                 )
                )
          ) == 0
BEGIN
    UPDATE ExercisePreference
    SET intervalSchemeId = 0
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);
END;

createTriggerDeleteUnusedIndividualIntervalScheme:
CREATE TRIGGER IF NOT EXISTS TempDeleteUnusedIndividualIntervalScheme
AFTER UPDATE OF intervalSchemeId ON ExercisePreference
WHEN old.intervalSchemeId NOT IN (0, new.intervalSchemeId)
BEGIN
    DELETE FROM IntervalScheme
    WHERE id != 0
          AND name == ''
          AND id NOT IN (SELECT intervalSchemeId FROM ExercisePreference);
END;