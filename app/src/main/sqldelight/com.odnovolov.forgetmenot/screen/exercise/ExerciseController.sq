setCurrentExerciseCardIdByPosition:
UPDATE Exercise SET currentExerciseCardId = (
    SELECT id
    FROM ExerciseCard
    ORDER BY id
    LIMIT 1
    OFFSET :position
);

setLearnedForCurrentCard:
UPDATE Card SET isLearned = ? WHERE id == (SELECT cardId FROM CurrentExerciseCard);

setVisibleToRepeatedCards:
UPDATE ExerciseCard SET isVisible = ?
WHERE cardId == (
                 SELECT cardId FROM ExerciseCard WHERE id == (
                                                              SELECT currentExerciseCardId FROM Exercise
                                                             )
                )
      AND id > (SELECT currentExerciseCardId FROM Exercise);

isNeedToAutoSpeak:
SELECT questionAutoSpeak AND isLearned == 0 AND isAnswerCorrect IS NULL
FROM CurrentExercisePronunciation, CurrentExerciseCard;

speakingDataForQuestionAutoSpeak:
SELECT
    question AS text,
    questionLanguage AS language,
    doNotSpeakTextInBrackets
FROM CurrentExerciseCard, CurrentExercisePronunciation;

speakingDataForAnswerAutoSpeak:
SELECT
    answer AS text,
    answerLanguage AS language,
    doNotSpeakTextInBrackets
FROM CurrentExerciseCard, CurrentExercisePronunciation;

speakingData:
SELECT
    CASE
        WHEN '' != questionTextSelection THEN questionTextSelection
        WHEN '' != answerTextSelection THEN answerTextSelection
        WHEN isAnswerCorrect IS NOT NULL THEN answer
        ELSE question
    END AS text,
    CASE
        WHEN '' != questionTextSelection THEN questionLanguage
        WHEN '' != answerTextSelection THEN answerLanguage
        WHEN isAnswerCorrect IS NOT NULL THEN answerLanguage
        ELSE questionLanguage
    END AS language,
    doNotSpeakTextInBrackets
FROM TextSelection, CurrentExercisePronunciation, CurrentExerciseCard;

getHintInfo:
SELECT hint, answer, hintSelectionStartIndex, hintSelectionEndIndex
FROM CurrentExerciseCard, TextSelection;

getAnswerForCurrentExerciseCard:
SELECT answer FROM CurrentExerciseCard;

setHintForCurrentExerciseCard:
UPDATE ExerciseCard SET hint = ? WHERE id == (
    SELECT currentExerciseCardId FROM Exercise
);

setQuizTestMethodForCurrentExerciseCard:
UPDATE ExerciseCard SET testMethod = 'Quiz' WHERE id == (
    SELECT currentExerciseCardId FROM Exercise
);

answerAutoSpeakTriggered:
SELECT answerAutoSpeakTriggered FROM Events;

flushAnswerAutoSpeakTriggered:
UPDATE Events SET answerAutoSpeakTriggered = 0;

areIntervalsOn:
SELECT intervalSchemeId IS NOT NULL FROM ExercisePreference WHERE id == (
    SELECT exercisePreferenceId FROM Deck WHERE id == (
        SELECT deckId FROM Card WHERE id == (
            SELECT cardId FROM ExerciseCard WHERE id == (
                SELECT currentExerciseCardId FROM Exercise
            )
        )
    )
);

intervalItem:
SELECT
    Interval.targetLevelOfKnowledge - 1 AS levelOfKnowledge,
    Interval.value AS waitingPeriod,
    Card.levelOfKnowledge == Interval.targetLevelOfKnowledge - 1 AS isSelected
FROM
    ExerciseCard
    JOIN Card ON ExerciseCard.cardId == Card.id
    JOIN Deck ON Card.deckId = Deck.id
    JOIN ExercisePreference ON Deck.exercisePreferenceId == ExercisePreference.id
    JOIN Interval ON ExercisePreference.intervalSchemeId == Interval.intervalSchemeId
WHERE
    ExerciseCard.id == (SELECT currentExerciseCardId FROM Exercise)
ORDER BY
    Interval.targetLevelOfKnowledge;

setLevelOfKnowledge:
UPDATE Card SET levelOfKnowledge = ? WHERE id == (
    SELECT cardId FROM CurrentExerciseCard
);

setIsLevelOfKnowledgeEditedByUserTrue:
UPDATE ExerciseCard SET isLevelOfKnowledgeEditedByUser = 1 WHERE cardId == (
    SELECT cardId FROM CurrentExerciseCard
);

cleanEditCardState:
DELETE FROM EditCardState;

initEditCardState:
INSERT INTO EditCardState
SELECT question, answer FROM Card WHERE id == (
    SELECT cardId FROM CurrentExerciseCard
);