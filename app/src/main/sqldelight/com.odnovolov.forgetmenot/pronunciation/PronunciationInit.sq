createTablePronunciationState:
CREATE TABLE IF NOT EXISTS TempPronunciationState (
    availableLanguages TEXT, -- AS List<Locale>
    presetNameInputDialogStatus TEXT NOT NULL DEFAULT 'Invisible', -- AS PresetNameInputDialogStatus
    typedPronunciationName TEXT NOT NULL DEFAULT '',
    nameCheckResult TEXT NOT NULL DEFAULT 'OK', -- AS NameCheckStatus
    renamePronunciationId INTEGER
);

cleanTablePronunciationState:
DELETE FROM TempPronunciationState;

initPronunciationState:
INSERT INTO TempPronunciationState DEFAULT VALUES;

createTriggerPreventRemovalOfDefaultPronunciation:
CREATE TRIGGER IF NOT EXISTS TempPreventRemovalOfDefaultPronunciation
BEFORE DELETE ON Pronunciation WHEN old.id == 0
BEGIN
    SELECT RAISE(ROLLBACK, 'cannot delete default Pronunciation');
END;

createTriggerOnTryToModifyDefaultPronunciation:
CREATE TRIGGER IF NOT EXISTS TempOnTryToModifyDefaultPronunciation
BEFORE UPDATE ON Pronunciation
WHEN old.id == 0 AND (new.id != 0
                      OR new.name != ''
                      OR new.questionLanguage IS NOT NULL
                      OR new.questionAutoSpeak != 0
                      OR new.answerLanguage IS NOT NULL
                      OR new.answerAutoSpeak != 0)
BEGIN
    INSERT INTO Pronunciation(
        name,
        questionLanguage,
        questionAutoSpeak,
        answerLanguage,
        answerAutoSpeak
    ) VALUES (
        new.name,
        new.questionLanguage,
        new.questionAutoSpeak,
        new.answerLanguage,
        new.answerAutoSpeak
    );

    UPDATE ExercisePreference
    SET pronunciationId = (SELECT last_insert_rowid())
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    SELECT RAISE(IGNORE);
END;

createTriggerSetDefaultPronunciationIfNeed:
CREATE TRIGGER IF NOT EXISTS TempSetDefaultPronunciationIfNeed
BEFORE UPDATE ON Pronunciation
WHEN new.name == ''
 AND new.questionLanguage IS NULL
 AND new.questionAutoSpeak == 0
 AND new.answerLanguage IS NULL
 AND new.answerAutoSpeak == 0
BEGIN
    UPDATE ExercisePreference
    SET pronunciationId = 0
    WHERE id == (SELECT id FROM TempCurrentExercisePreference);

    SELECT RAISE(IGNORE);
END;

createTriggerOnDeletePronunciation:
CREATE TRIGGER IF NOT EXISTS TempOnDeletePronunciation
AFTER DELETE ON Pronunciation
BEGIN
    UPDATE ExercisePreference
    SET pronunciationId = 0
    WHERE pronunciationId == old.id;
END;

createTriggerDeleteUnusedIndividualPronunciation:
CREATE TRIGGER IF NOT EXISTS TempDeleteUnusedIndividualPronunciation
AFTER UPDATE OF pronunciationId ON ExercisePreference
WHEN old.pronunciationId NOT IN (0, new.pronunciationId)
BEGIN
    DELETE FROM Pronunciation
    WHERE id != 0
      AND name == ''
      AND id NOT IN (SELECT pronunciationId FROM ExercisePreference);
END;